// docs/.island/config.ts
import { defineConfig } from "file:///Users/bytedance/code/island-tutorial/node_modules/.pnpm/islandjs@0.7.3/node_modules/islandjs/dist/node/index.js";
import { remarkCodeHike } from "file:///Users/bytedance/code/island-tutorial/node_modules/.pnpm/@code-hike+mdx@0.7.4/node_modules/@code-hike/mdx/dist/index.esm.mjs";
import { createRequire } from "module";
var __vite_injected_original_import_meta_url = "file:///Users/bytedance/code/island-tutorial/docs/.island/config.ts";
var require2 = createRequire(__vite_injected_original_import_meta_url);
var theme = require2("shiki/themes/nord.json");
var version = require2("islandjs/package.json").version;
function getI18nHelper(lang) {
  const cn = lang === "zh";
  const prefix = cn ? "/zh" : "/en";
  const getLink = (str) => `${prefix}${str}`;
  const getText = (cnText, enText) => cn ? cnText : enText;
  return { getText, getLink };
}
var config_default = defineConfig({
  markdown: {
    remarkPlugins: [
      [remarkCodeHike, { theme, autoImport: true, showCopyButton: true }]
    ]
  },
  title: "Island.js \u6559\u7A0B",
  themeConfig: {
    locales: {
      "/zh/": {
        label: "\u7B80\u4F53\u4E2D\u6587",
        nav: getNavbar("zh"),
        sidebar: getSidebar("zh"),
        title: "Island.js \u6559\u7A0B",
        lang: "zh"
      },
      "/en/": {
        label: "English",
        nav: getNavbar("en"),
        sidebar: getSidebar("en"),
        title: "Island.js Tutorial",
        lang: "en"
      }
    },
    socialLinks: [
      {
        icon: "github",
        link: "https://github.com/sanyuan0704/island-tutorial"
      }
    ]
  },
  enableSpa: true,
  route: {
    exclude: ["compoents/**/*"]
  }
});
function getNavbar(lang) {
  const { getLink, getText } = getI18nHelper(lang);
  return [
    {
      text: getText("\u6307\u5357", "Guide"),
      link: `https://island.sanyuan0704.top/${lang}/guide/getting-started`
    },
    {
      text: getText("\u6559\u7A0B", "Tutorial"),
      link: `/${lang}/`
    },
    {
      text: getText("API", "API"),
      link: `https://island.sanyuan0704.top/${lang}/api/`
    },
    {
      text: `v${version}`,
      items: [
        {
          text: getText("\u66F4\u65B0\u65E5\u5FD7", "Changelog"),
          link: "https://github.com/sanyuan0704/island.js/blob/master/CHANGELOG.md"
        },
        {
          text: getText("\u8D21\u732E\u6307\u5357", "Contributing"),
          link: "https://github.com/sanyuan0704/island.js/blob/master/.github/contributing.md"
        }
      ]
    }
  ];
}
function getSidebar(lang) {
  const { getLink, getText } = getI18nHelper(lang);
  return {
    [getLink("")]: [
      {
        text: getText("\u57FA\u7840\u6559\u7A0B", "Basic Tutorial"),
        items: [
          {
            text: getText("\u521D\u59CB\u5316\u9879\u76EE", "Initialize Project"),
            link: getLink("/")
          },
          {
            text: getText("\u5BFC\u822A\u680F/\u4FA7\u8FB9\u680F\u914D\u7F6E", "Navbar/Sidebar Config"),
            link: getLink("/config-bar")
          },
          {
            text: getText("\u7F16\u5199 Markdown \u5185\u5BB9", "Write Markdown"),
            link: getLink("/markdown")
          },
          {
            text: getText("\u9879\u76EE\u6784\u5EFA\u6253\u5305", "Build In Production"),
            link: getLink("/build")
          },
          {
            text: getText("\u63A5\u5165\u56FD\u9645\u5316", "Integrate I18n"),
            link: getLink("/i18n")
          },
          {
            text: getText("\u9879\u76EE\u90E8\u7F72", "Deploy"),
            link: getLink("/deploy")
          }
        ]
      },
      {
        text: getText("\u8FDB\u9636\u6559\u7A0B", "Advanced Tutorial"),
        items: [
          {
            text: getText("\u4EA4\u4E92\u5F0F\u6587\u6863\u5F00\u53D1", "Interactive Docs"),
            link: getLink("/code-hike")
          }
        ]
      }
    ]
  };
}
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
